<div class="navbar__child_container grid grid-cols-12">

    <!-- Add a toggle button for mobile view -->
    <section class="toggle__container col-span-1 lg:hidden flex justify-center items-center">
        <button class="sidebar__toggle dark:text-white flex items-center">
            <ion-icon name="menu-outline"></ion-icon>
        </button>
    </section>

    <section class="logo__container col-span-2 lg:col-span-2 flex justify-center items-center">
        <a href='/dashboard' class="dark:text-white spacing relative group flex items-center">
            <div class="logo__container_svg_nav"></div>
            <span class="hidden md:block">Pharma<span class="text-[#00CFFE] dark:text-purple-600">Sync</span></span>
            
            <!-- Light mode shine effect -->
            <span class="absolute inset-0 rounded-full bg-[#00CFFE] opacity-0 group-hover:opacity-50 blur-lg group-hover:blur-md transition duration-500 dark:hidden"></span>
            
            <!-- Dark mode shine effect -->
            <span class="absolute inset-0 rounded-full bg-purple-600 opacity-0 group-hover:opacity-50 blur-lg group-hover:blur-md transition duration-500 hidden dark:block"></span>
        </a>
    </section>
    
    

    <section class="search__container col-span-4 lg:col-span-7">
        <form onsubmit="handleSearch(event)">
            <div class="relative flex justify-end md:block">
                <button class="absolute w-7 inset-y-0 end-3 md:start-0 flex items-center ps-3">
                    <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                    </svg>
                </button>
                <input type="text" id="search" class="block w-3/12 focus:w-full md:w-full 
                2xl:w-7/12 2xl:focus:w-7/12 
                transition-all duration-300 ease-in-out 
                py-3 md:py-4 px-4 ps-8 md:ps-10 rounded-full border dark:border-gray-700 border-gray-300 
                text-sm text-gray-900 bg-[#F1F4F9] focus:bg-[#ced0d4] dark:bg-gray-700 dark:focus:bg-gray-800 
                dark:placeholder-gray-400 dark:text-white outline-none
                placeholder-transparent md:placeholder-gray-500" 
                placeholder="Search here" required />

                <!-- Dropdown Menu -->
                <ul id="search-options" class="hidden absolute w-5/12 mt-2 ml-5 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-500 rounded-lg shadow-lg z-10 dark:text-white">
                    <!-- Options will be dynamically added -->
                </ul>
            </div>
        </form>
    </section>

    <section class="profile__container col-span-5 lg:col-span-3 flex justify-evenly items-center">
        <!-- Notification Button with Dropdown -->
        <div class="relative">
            <!-- Notification Button -->
            <div class="notification__container xl:!block border dark:border-gray-700 border-gray-300 
                bg-[#F1F4F9] hover:bg-[#dde0e6] dark:bg-gray-700 dark:hover:bg-gray-800 transition-all duration-150 p-4 rounded-xl cursor-pointer" id="notification-btn">
                <div class="icon__container flex justify-center items-center h-full relative">
                    <ion-icon name="notifications-outline" class="text-gray-500 dark:text-[#fdfdfd]"></ion-icon>
                    <!-- Notification Indicator -->
                    <div id="notification-indicator" class="hidden absolute top-0 right-0 h-2 w-2 bg-red-600 rounded-full"></div>
                </div>
            </div>
        
            <!-- Notification Dropdown -->
            <div id="notification-dropdown" class="hidden absolute right-0 mt-2 w-72 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-700 rounded-lg shadow-lg z-10">
                <div class="p-4">
                    <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-100">Notifications</h3>
                </div>
                <ul id="notification-list" class="max-h-64 overflow-y-auto">
                    <!-- Notifications will be dynamically added here -->
                </ul>
            </div>
        </div>
        


        <!-- Image Container (70% width) -->
        <div class="image__container flex flex-grow-[0.1] justify-center items-center">
            <div id="multiLevelDropdownButton" data-dropdown-toggle="multi-dropdown" 
            class="person__container w-full flex justify-between items-center border dark:border-gray-700 border-gray-300 transition-all duration-200
            bg-[#F1F4F9] hover:bg-[#ced0d4] dark:bg-gray-700 dark:hover:bg-gray-500 rounded-full p-1 pr-3">
                <span class="flex items-center">
                    <img class="rounded-full object-cover w-[40px] h-[40px]" src="{{ profilePicture }}" alt="Profile Picture">
                    <h2 class="ml-1 hidden md:!block
                    font-bold text-gray-900 dark:text-white">{{ username }}</h2>
                </span>
                <ion-icon name="chevron-down-outline" class="arrow expanded__label text-gray-500 dark:!text-white"></ion-icon>
            </div>

            <!-- Dropdown menu -->
            <div id="multi-dropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
                <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="multiLevelDropdownButton">
                    <li>
                        <a href="#"
                            class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Dashboard</a>
                    </li>
                    <li>
                        <!-- <button id="doubleDropdownButton" data-dropdown-toggle="doubleDropdown"
                            data-dropdown-placement="right-start" type="button"
                            class="flex items-center justify-between w-full px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Dropdown<svg
                                class="w-2.5 h-2.5 ms-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                fill="none" viewBox="0 0 6 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="m1 9 4-4-4-4" />
                            </svg></button> -->
                        <!-- <div id="doubleDropdown"
                            class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
                            <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="doubleDropdownButton">
                                <li>
                                    <a href="#"
                                        class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Overview</a>
                                </li>
                                <li>
                                    <a href="#"
                                        class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">My
                                        downloads</a>
                                </li>
                                <li>
                                    <a href="#"
                                        class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Billing</a>
                                </li>
                                <li>
                                    <a href="#"
                                        class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Rewards</a>
                                </li>
                            </ul>
                        </div> -->
                    </li>
                    <!-- <li>
                        <a href="#"
                            class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Earnings</a>
                    </li> -->
                    <li>
                        <a href="/logout" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Sign
                            out</a>
                    </li>
                </ul>
            </div>
        </div>

        <button
            class="theme__btn inline-flex relative h-6 w-11 rounded-full bg-gray-200 transition-all duration-300 ease-in-out dark:bg-gray-600 group"
            aria-label="Toggle theme">
                <div class="absolute left-0.5 top-0.5 flex h-5 w-5 items-center justify-center rounded-full bg-white shadow-sm transition-transform duration-300 ease-in-out dark:bg-gray-800 
                    translate-x-5">
                    <svg class="h-3 w-3 text-amber-500" fill="currentColor" viewBox="0 0 20 20">
                    <path
                        d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
                        fill-rule="evenodd" clip-rule="evenodd">
                    </path>
                    </svg>
                </div>
        </button>
    </section>
</div>


<script>
    function handleSearch(event) {
        event.preventDefault(); // Prevent the form from submitting normally
    
        const searchInput = document.getElementById('search').value.trim().toLowerCase();
    
        // Define mapping of search terms to routes
        const routes = {
            "dashboard": "/dashboard",
            "purchase": "/purchase-list",
            "purchases": "/purchase-list",
            "order": "/order-list",
            "orders": "/order-list",
            "manufactured": "/inventory/manufactured",
            "materials": "/inventory/raw",
            "medicine": "/medicine-list",
            "batches": "/batch-list",
            "racks": "/batch-list",
            "groq": "/ask-groq",
            "customers": "/customer-list",
            "suppliers": "/supplier-list",
            "users": "/users-list",
            "ipt-aim-bsit3a": "/logout" // Secret code for logging out
        };
    
        // Check if the search term matches a route
        if (routes[searchInput]) {
            window.location.href = routes[searchInput];
        }
    }
    
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("search");
        const searchOptions = document.getElementById("search-options");
    
        // Define the routes and their descriptions
        const options = [
            { label: "Dashboard", value: "/dashboard" },
            { label: "Purchase List", value: "/purchase-list" },
            { label: "Order List", value: "/order-list" },
            { label: "Inventory Manufactured", value: "/inventory/manufactured" },
            { label: "Inventory Raw", value: "/inventory/raw" },
            { label: "Medicine List", value: "/medicine-list" },
            { label: "Batches and Racks", value: "/batch-list" },
            { label: "Groq AI", value: "/ask-groq" },
            { label: "Customers", value: "/customer-list" },
            { label: "Suppliers", value: "/supplier-list" },
            { label: "Users", value: "/users-list" },
            { label: "Logout (Secret Code)", value: "/logout" },
        ];
    
        // Populate the dropdown
        options.forEach(option => {
            const li = document.createElement("li");
            li.textContent = option.label;
            li.dataset.value = option.value;
            li.className = "p-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600";
            li.addEventListener("click", () => {
                window.location.href = option.value; // Redirect to the selected route
            });
            searchOptions.appendChild(li);
        });
    
        // Show dropdown on focus
        searchInput.addEventListener("focus", () => {
            searchOptions.classList.remove("hidden");
        });
    
        // Hide dropdown on blur (with a small delay to allow clicks)
        searchInput.addEventListener("blur", () => {
            setTimeout(() => searchOptions.classList.add("hidden"), 100);
        });
    
        // Filter dropdown options based on user input
        searchInput.addEventListener("input", () => {
            const query = searchInput.value.trim().toLowerCase();
            Array.from(searchOptions.children).forEach(li => {
                if (li.textContent.toLowerCase().includes(query)) {
                    li.classList.remove("hidden");
                } else {
                    li.classList.add("hidden");
                }
            });
        });
    });
    
    
    document.addEventListener("DOMContentLoaded", function () {
        const notificationBtn = document.getElementById("notification-btn");
        const notificationDropdown = document.getElementById("notification-dropdown");
        const notificationList = document.getElementById("notification-list");
        const notificationIndicator = document.getElementById("notification-indicator");
    
        fetchAlerts(); // Fetch alerts

        // Toggle the visibility of the dropdown
        notificationBtn.addEventListener("click", () => {
            notificationDropdown.classList.toggle("hidden");
        });

    
        // Fetch alerts data from the /alerts route
        async function fetchAlerts() {
            try {
                const response = await fetch("/alerts");
                const data = await response.json();
    
                // Clear existing notifications
                notificationList.innerHTML = "";
    
                let totalNotifications = 0;
    
                // Add Manufactured alerts
                if (data.manufactured.nearingOutOfStock > 0 || data.manufactured.expiringSoon > 0) {
                    notificationList.innerHTML += `
                        <li class="p-2 text-sm text-gray-800 dark:text-gray-200 bg-gray-100 dark:bg-gray-800 font-semibold">
                            Manufactured
                        </li>
                    `;
                    if (data.manufactured.nearingOutOfStock > 0) {
                        notificationList.innerHTML += `
                            <li class="p-2 text-sm text-orange-600 dark:text-orange-300">
                                Nearing Out of Stock: ${data.manufactured.nearingOutOfStock}
                            </li>
                        `;
                        totalNotifications += data.manufactured.nearingOutOfStock;
                    }
                    if (data.manufactured.expiringSoon > 0) {
                        notificationList.innerHTML += `
                            <li class="p-2 text-sm text-orange-600 dark:text-orange-300">
                                Expiring Soon: ${data.manufactured.expiringSoon}
                            </li>
                        `;
                        totalNotifications += data.manufactured.expiringSoon;
                    }
                }
    
                // Add Raw Material alerts
                if (data.raw.nearingOutOfStock > 0 || data.raw.outOfStock > 0) {
                    notificationList.innerHTML += `
                        <li class="p-2 text-sm text-gray-800 dark:text-gray-200 bg-gray-100 dark:bg-gray-800 font-semibold">
                            Raw Materials
                        </li>
                    `;
                    if (data.raw.nearingOutOfStock > 0) {
                        notificationList.innerHTML += `
                            <li class="p-2 text-sm text-orange-600 dark:text-orange-300">
                                Nearing Out of Stock: ${data.raw.nearingOutOfStock}
                            </li>
                        `;
                        totalNotifications += data.raw.nearingOutOfStock;
                    }
                    if (data.raw.outOfStock > 0) {
                        notificationList.innerHTML += `
                            <li class="p-2 text-sm text-orange-600 dark:text-orange-300">
                                Out of Stock: ${data.raw.outOfStock}
                            </li>
                        `;
                        totalNotifications += data.raw.outOfStock;
                    }
                }
    
                // Show notification indicator if there are notifications
                if (totalNotifications > 0) {
                    notificationIndicator.classList.remove("hidden");
                } else {
                    notificationIndicator.classList.add("hidden");
                }
    
                // Handle empty notifications
                if (totalNotifications === 0) {
                    notificationList.innerHTML = `
                        <li class="p-2 text-sm text-gray-600 dark:text-gray-300">
                            No notifications at this time.
                        </li>
                    `;
                }
            } catch (error) {
                console.error("Error fetching alerts:", error);
                notificationList.innerHTML = `
                    <li class="p-2 text-sm text-red-600 dark:text-red-400">
                        Failed to load notifications.
                    </li>
                `;
                notificationIndicator.classList.add("hidden");
            }
        }
    });
    
    
    
</script>